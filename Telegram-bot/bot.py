import pandas as pd
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from config import BOT_TOKEN, CSV_FILE

# --- Load d·ªØ li·ªáu CSV ---
def load_data():
    try:
        return pd.read_csv(CSV_FILE, sep='\t')
    except FileNotFoundError:
        return pd.DataFrame(columns=["PLU CODE", "PLU NAME", "Price"])

# --- T√¨m s·∫£n ph·∫©m theo PLU ---
def search_by_plu(plu_code):
    data = load_data()
    result = data[data["PLU CODE"].astype(str) == str(plu_code)]
    if result.empty:
        return "‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m."
    row = result.iloc[0]
    return f"üì¶ {row['PLU NAME']}\nüí∞ Gi√°: {row['Price']} VND"

# --- /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã Ch√†o b·∫°n!\n"
        "- Upload file CSV ƒë·ªÉ c·∫≠p nh·∫≠t d·ªØ li·ªáu.\n"
        "- Nh·∫≠p m√£ PLU ƒë·ªÉ tra c·ª©u gi√°.\n"
        "- G√µ /check ƒë·ªÉ xem s·ªë s·∫£n ph·∫©m hi·ªán c√≥."
    )

# --- /check ---
async def check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    count = len(data)
    if count == 0:
        await update.message.reply_text("‚ö†Ô∏è Hi·ªán ch∆∞a c√≥ s·∫£n ph·∫©m n√†o.")
    else:
        await update.message.reply_text(f"üì¶ Hi·ªán c√≥ {count} s·∫£n ph·∫©m trong file CSV.")

# --- X·ª≠ l√Ω khi upload file ---
async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    file = await update.message.document.get_file()
    await file.download_to_drive(CSV_FILE)
    try:
        data = pd.read_csv(CSV_FILE)
        await update.message.reply_text(f"‚úÖ File CSV ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t! C√≥ {len(data)} s·∫£n ph·∫©m.")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è L·ªói ƒë·ªçc file: {e}")
        

 # --- /add Ten san pham |Gia ---
async def add_product(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = " ".join(context.args)
        name, price = text.split("|")
        global data
        new_row = {"ProductName": name.strip(), "Price": price.strip()}
        data = pd.concat([data, pd.DataFrame([new_row])], ignore_index=True)
        data.to_csv("141PLUcan.csv", index=False)
        await update.message.reply_text(f"‚úÖ ƒê√£ th√™m {name.strip()} - {price.strip()}")
    except:
        await update.message.reply_text("‚ùå Sai c√∫ ph√°p. D√πng: /add T√™n s·∫£n ph·∫©m | Gi√°")

# Th√™m v√†o main()
application.add_handler(CommandHandler("add", add_product))
# --- X·ª≠ l√Ω nh·∫≠p m√£ PLU ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    code = update.message.text.strip()
    reply = search_by_plu(code)
    await update.message.reply_text(reply)

# --- Main ---
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("check", check))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_file))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.run_polling()

if __name__ == "__main__":
    main()
